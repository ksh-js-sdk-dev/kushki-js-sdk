
name: Deployment

on:
  pull_request:
    branches:
      - "release/*"
      - "feature/*"

  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - name: Install dependencies
        id: install
        run: yarn install

      - name: Generate schema
        run: yarn run tsc:interface

      - name: Test code
        id: run-tests
        run: yarn run validate

      - name: Upload test report
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test.json

  build-version:
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Get current version
        run: |
          GET_VERSION=$(node -p -e "require('./package.json').version")
          echo "GET_VERSION=${GET_VERSION}" >> $GITHUB_ENV

      - name: Extract branch number
        id: extract-number-branch
        run: |
          BRANCH=${{ github.base_ref }}
          IFS='/' read -ra BRANCH_PARTS <<< "$BRANCH"
          echo "BRANCH_SOURCE=${BRANCH_PARTS[0]}" >> $GITHUB_ENV
          echo "BRANCH_NUMBER=${BRANCH_PARTS[1]}" >> $GITHUB_ENV

      - name: Determine Version Format
        run: |
          CURRENT_VERSION=$GET_VERSION
          if [[ $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            IS_NEW_FORMAT=false
          else
            IS_NEW_FORMAT=true
          fi
          echo "IS_NEW_FORMAT=${IS_NEW_FORMAT}" >> $GITHUB_ENV

      - name: Set Version
        run: |
          CURRENT_VERSION=$GET_VERSION
          if [[ $IS_NEW_FORMAT == "true" ]]; then
          
            IFS='-' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
  
            if [ "$BRANCH_SOURCE" == "feature" ]; then
              IFS='.' read -ra VERSION_PARTS_SECOND <<< "${VERSION_PARTS[2]}"
              GET_BRANCH_NUMBER="${VERSION_PARTS[1]}-${VERSION_PARTS_SECOND[0]}"
            elif [ "$BRANCH_SOURCE" == "hotfix" ]; then
              IFS='.' read -ra VERSION_PARTS_SECOND <<< "${VERSION_PARTS[2]}"
              GET_BRANCH_NUMBER="${VERSION_PARTS[1]}-${VERSION_PARTS_SECOND[0]}"
            elif [ "$BRANCH_SOURCE" == "release" ]; then
              IFS='.' read -ra VERSION_PARTS_SECOND <<< "${VERSION_PARTS[1]}"
              GET_BRANCH_NUMBER="${VERSION_PARTS_SECOND[0]}"
            fi
  
            echo "GET_BRANCH_NUMBER is $GET_BRANCH_NUMBER"
            echo "VERSION_PARTS_SECOND is $VERSION_PARTS_SECOND"
  
            if [[ $GET_BRANCH_NUMBER == $BRANCH_NUMBER ]]; then
              CURRENT_NUMBER="${VERSION_PARTS_SECOND[1]}"
              NEW_NUMBER=$((CURRENT_NUMBER + 1))
              NEW_VERSION="${VERSION_PARTS[0]}-${BRANCH_NUMBER}.${NEW_NUMBER}"
            else
              IFS='.' read -ra VERSION_PARTS_FIRST <<< "${VERSION_PARTS[0]}"
              MAJOR_VERSION="${VERSION_PARTS_FIRST[0]}"
              MINOR_VERSION="${VERSION_PARTS_FIRST[1]}"
              NEW_VERSION_MINOR=$((MINOR_VERSION + 1))
              BRANCH_NUMBER=$BRANCH_NUMBER
              NEW_VERSION="${MAJOR_VERSION}.${NEW_VERSION_MINOR}.0-${BRANCH_NUMBER}.1"
              NEW_VERSION="${VERSION_PARTS[0]}-${BRANCH_NUMBER}.1"
            fi
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
  
          else
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR_VERSION="${VERSION_PARTS[0]}"
            MINOR_VERSION="${VERSION_PARTS[1]}"
            PATCH_VERSION="${VERSION_PARTS[2]}" 
            NEW_VERSION_MINOR=$((MINOR_VERSION + 1))
            BRANCH_NUMBER=$BRANCH_NUMBER
            NEW_VERSION="${MAJOR_VERSION}.${NEW_VERSION_MINOR}.${PATCH_VERSION}-${BRANCH_NUMBER}.1"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          fi

      - name: console log
        run: |
          echo "GET_VERSION is $GET_VERSION"          
          echo "BRANCH_SOURCE is $BRANCH_SOURCE"
          echo "BRANCH_NUMBER is $BRANCH_NUMBER"
          echo "NEW_VERSION is $NEW_VERSION"          
          echo "IS_NEW_FORMAT is $IS_NEW_FORMAT"
  
      - name: Config Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Set new version in package.json
        run: |
          echo "NEW_VERSION is $NEW_VERSION"
          npm version "$NEW_VERSION"

      - name: Push new version to GitHub
        run: |
          git push --follow-tags

  build:
    needs: build-version
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - name: Pull new version to GitHub
        run: git pull

      - name: Install dependencies
        run: yarn install

      - name: Generate schema
        run: yarn run tsc:interface

      - name: Publish to npm
        env:
          NPM_PUB_TOKEN: ${{ secrets.NPM_PUB_TOKEN }}
        run: |
          printf "\n//registry.npmjs.org/:_authToken=\"${NPM_PUB_TOKEN}\"" >> .npmrc
          npm publish --tag alpha --unsafe-perm

      - name: Build website
        run: yarn run build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: lib-files
          path: lib

  deploy-s3:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: lib-files
          path: ./lib

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::732306726995:role/GitHubActionsS3Full
          aws-region: us-east-1
          role-session-name: GitHub_to_AWS_via_FederatedOIDC

      - name: upload file AWS S3
        run: aws s3 sync ./lib s3://js-sdk-build-gha-demo/
