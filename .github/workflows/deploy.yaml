
name: Deployment

on:
  pull_request:
    branches:
      - "release/*"
      - "feature/*"
      - "master"
      - "develop"
    types: [closed]

  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - name: Install dependencies
        id: install
        run: yarn install

      - name: Generate schemas
        run: yarn run tsc:interface

      - name: Test code
        id: run-tests
        run: yarn run validate

      - name: Upload test report
        if: failure() && steps.run-tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test.json

  build-version:
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.generate-version.outputs.new-version }}
      branch: ${{ steps.generate-version.outputs.branch }}
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Generate new version
        id: generate-version
        uses: ./.github/actions/generate-version

  build:
    needs: build-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      branch: ${{ needs.build-version.outputs.branch }}
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - name: Config Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Set new version in package.json
        id: version
        run: |
          NEW_VERSION=${{ needs.build-version.outputs.new-version }}
          echo "NEW_VERSION is $NEW_VERSION"
          echo "new-version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          npm version "$NEW_VERSION"

      - name: Create env
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_VITE_SPA_INPUTS_URL: ${{ secrets.VITE_SPA_INPUTS_URL }}
          file_name: .env

      - name: Install dependencies
        run: yarn install

      - name: Generate schemas
        run: yarn run tsc:interface

      - name: Build library
        run: yarn run build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lib-files
          path: lib

      - name: Upload artifacts dist
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist

      - name: Push new version to GitHub
        run: |
          BRANCH=${{ needs.build-version.outputs.branch }}
          git push --follow-tags origin HEAD:"$BRANCH"

  deploy-npm:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      branch: ${{ needs.build.outputs.branch }}
    steps:
      - name: Get dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: ./

      - name: Publish to npm
        env:
          NPM_PUB_TOKEN: ${{ secrets.NPM_PUB_TOKEN }}
        run: |
          printf "\n//registry.npmjs.org/:_authToken=\"${NPM_PUB_TOKEN}\"" >> .npmrc
          if [ "${{ needs.build.outputs.branch }}" == "master" ]; then
            npm publish
          else
            npm publish --tag alpha
          fi
      - name: Set new version in package.json
        id: version
        run: |
          NEW_VERSION=${{ needs.build.outputs.new-version }}
          echo "NEW_VERSION is $NEW_VERSION"
          echo "new-version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

  deploy-cdn:
    needs: deploy-npm
    #    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      BRANCH: ${{ needs.deploy-npm.outputs.branch }}
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Get lib artifacts
        uses: actions/download-artifact@v4
        with:
          name: lib-files
          path: ./lib

      - name: Determine AWS account
        if: always()
        run: |
          BRANCH="${{ env.BRANCH }}"
          if [ "$BRANCH" == "master" ]; then
            echo "ACCOUNT=${{ secrets.PRIMARY_ACCOUNT }}" >> $GITHUB_ENV
            echo "DESTINATION_BUCKET=${{ secrets.PRIMARY_BUCKET }}" >> $GITHUB_ENV
            echo "DISTRIBUTION=${{ secrets.PRIMARY_DISTRIBUTION }}" >> $GITHUB_ENV
          elif [ "$BRANCH" == "develop" ]; then
            echo "ACCOUNT=${{ secrets.UAT_ACCOUNT }}" >> $GITHUB_ENV
            echo "DESTINATION_BUCKET=${{ secrets.UAT_BUCKET }}" >> $GITHUB_ENV
            echo "DISTRIBUTION=${{ secrets.UAT_DISTRIBUTION }}" >> $GITHUB_ENV
          else
            echo "ACCOUNT=${{ secrets.QA_ACCOUNT }}" >> $GITHUB_ENV
            echo "DESTINATION_BUCKET=${{ secrets.QA_BUCKET }}" >> $GITHUB_ENV
            echo "DISTRIBUTION=${{ secrets.QA_DISTRIBUTION }}" >> $GITHUB_ENV
          fi

      - name: Configure AWS Credentials S3
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT }}:role/GitHubActionsS3Full
          aws-region: us-east-1
          role-session-name: GitHub_to_AWS_via_FederatedOIDC

      - name: upload file AWS S3
        run: |
          NEW_VERSION=${{ needs.deploy-npm.outputs.new-version }}
          echo "NEW_VERSION is $NEW_VERSION"
          aws s3 sync ./lib s3://${{ env.DESTINATION_BUCKET }}/js/"$NEW_VERSION"
          aws s3 sync ./lib s3://${{ env.DESTINATION_BUCKET }}/js/latest

      - name: Configure AWS Credentials CloudFront
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT }}:role/GitHubActionsCloudFrontFull
          aws-region: us-east-1
          role-session-name: GitHub_to_AWS_via_FederatedOIDC

      - name: Invalidate CloudFront Cache
        run: aws cloudfront create-invalidation --distribution-id ${{ env.DISTRIBUTION }} --paths "/*"
