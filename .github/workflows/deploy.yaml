
name: Deployment

on:
  pull_request:
    branches:
      - "release/*"
      - "feature/*"

  workflow_dispatch:

jobs:
  build-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Get current version
        run: |
          GET_VERSION=$(node -p -e "require('./package.json').version")
          echo "GET_VERSION=${GET_VERSION}" >> $GITHUB_ENV

      - name: Extract branch number
        id: extract-number-branch
        run: |
          IFS='/' read -ra BRANCH_PARTS <<< "${GITHUB_REF}"
          BRANCH_NUMBER="${BRANCH_PARTS[3]}"
          echo "GITHUB_REF: ${GITHUB_REF}"
          
          SOURCE_BRANCH_FROM=${{ github.base_ref }}
          echo "SOURCE_BRANCH_FROM: $SOURCE_BRANCH_FROM"
          
          TARGET_BRANCH=${{ github.head_ref }}
          echo "TARGET_BRANCH: $TARGET_BRANCH"

          # Get the source branch from the push
          BRANCH_SOURCE=$(echo $GITHUB_REF | cut -d/ -f3)
          echo "BRANCH_SOURCE=$BRANCH_SOURCE" >> $GITHUB_ENV
          echo "BRANCH_NUMBER=$BRANCH_NUMBER" >> $GITHUB_ENV

      - name: Determine Version Format
        run: |
          CURRENT_VERSION=$GET_VERSION
          if [[ $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            IS_NEW_FORMAT=false
          else
            IS_NEW_FORMAT=true
          fi
          echo "IS_NEW_FORMAT=${IS_NEW_FORMAT}" >> $GITHUB_ENV

      - name: Set Version
        run: |
          CURRENT_VERSION=$GET_VERSION
          if [[ $IS_NEW_FORMAT == "true" ]]; then
          
            IFS='-' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"

            if [ "$BRANCH_SOURCE" == "feature" ]; then
              IFS='.' read -ra VERSION_PARTS_SECOND <<< "${VERSION_PARTS[2]}"
              GET_BRANCH_NUMBER="${VERSION_PARTS[1]}-${VERSION_PARTS_SECOND[0]}"
            elif [ "$BRANCH_SOURCE" == "hotfix" ]; then
              IFS='.' read -ra VERSION_PARTS_SECOND <<< "${VERSION_PARTS[2]}"
              GET_BRANCH_NUMBER="${VERSION_PARTS[1]}-${VERSION_PARTS_SECOND[0]}"
            elif [ "$BRANCH_SOURCE" == "release" ]; then
              IFS='.' read -ra VERSION_PARTS_SECOND <<< "${VERSION_PARTS[1]}"
              GET_BRANCH_NUMBER="${VERSION_PARTS_SECOND[0]}"
            fi

            echo "GET_BRANCH_NUMBER is $GET_BRANCH_NUMBER"
            echo "VERSION_PARTS_SECOND is $VERSION_PARTS_SECOND"

            if [[ $GET_BRANCH_NUMBER == $BRANCH_NUMBER ]]; then
              CURRENT_NUMBER="${VERSION_PARTS_SECOND[1]}"
              NEW_NUMBER=$((CURRENT_NUMBER + 1))
              NEW_VERSION="${VERSION_PARTS[0]}-${BRANCH_NUMBER}.${NEW_NUMBER}"
            else
              IFS='.' read -ra VERSION_PARTS_FIRST <<< "${VERSION_PARTS[0]}"
              MAJOR_VERSION="${VERSION_PARTS_FIRST[0]}"
              MINOR_VERSION="${VERSION_PARTS_FIRST[1]}"
              NEW_VERSION_MINOR=$((MINOR_VERSION + 1))
              BRANCH_NUMBER=$BRANCH_NUMBER
              NEW_VERSION="${MAJOR_VERSION}.${NEW_VERSION_MINOR}.0-${BRANCH_NUMBER}.1"
              NEW_VERSION="${VERSION_PARTS[0]}-${BRANCH_NUMBER}.1"
            fi
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

          else
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR_VERSION="${VERSION_PARTS[0]}"
            MINOR_VERSION="${VERSION_PARTS[1]}"
            PATCH_VERSION="${VERSION_PARTS[2]}" 
            NEW_VERSION_MINOR=$((MINOR_VERSION + 1))
            BRANCH_NUMBER=$BRANCH_NUMBER
            NEW_VERSION="${MAJOR_VERSION}.${NEW_VERSION_MINOR}.${PATCH_VERSION}-${BRANCH_NUMBER}.1"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          fi

      - name: console log
        run: |
          echo "GET_VERSION is $GET_VERSION"          
          echo "BRANCH_SOURCE is $BRANCH_SOURCE"
          echo "BRANCH_NUMBER is $BRANCH_NUMBER"
          echo "NEW_VERSION is $NEW_VERSION"          
          echo "IS_NEW_FORMAT is $IS_NEW_FORMAT"