
name: Deployment

on:
  pull_request:
    branches:
      - "release/*"
      - "feature/*"
    types: [closed]

  workflow_dispatch:

jobs:
  build-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Get current version
        run: |
          GET_VERSION=$(node -p -e "require('./package.json').version")
          echo "GET_VERSION=${GET_VERSION}" >> $GITHUB_ENV

      - name: Extract branch number
        id: extract-number-branch
        run: |
          BRANCH=${{ github.base_ref }}
          IFS='/' read -ra BRANCH_PARTS <<< "$BRANCH"
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
          echo "BRANCH_SOURCE=${BRANCH_PARTS[0]}" >> $GITHUB_ENV
          echo "BRANCH_NUMBER=${BRANCH_PARTS[1]}" >> $GITHUB_ENV

      - name: Validate version format
        run: |
          CURRENT_VERSION=$GET_VERSION
          TYPE_FORMAT_VERSION="error"
          if [ $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]; then
            TYPE_FORMAT_VERSION="latest"
          elif [ $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+-[0-9]+\.[0-9]+$ ]; then
            TYPE_FORMAT_VERSION="release"
          elif [ $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+-tik-[0-9]+-patch\.[0-9]+$ ]; then
            TYPE_FORMAT_VERSION="hotfix"
          elif [ $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+-[0-9]+-alpha\.[0-9]+$ ]; then
            TYPE_FORMAT_VERSION="develop"
          fi
          echo "TYPE_FORMAT_VERSION=${TYPE_FORMAT_VERSION}" >> $GITHUB_ENV

      - name: Determine Version Format
        run: |
          CURRENT_VERSION=$GET_VERSION
          if [[ $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            IS_NEW_FORMAT=false
          else
            IS_NEW_FORMAT=true
          fi
          echo "IS_NEW_FORMAT=${IS_NEW_FORMAT}" >> $GITHUB_ENV

      - name: Set Version
        run: |
          CURRENT_VERSION=$GET_VERSION
          if [[ $IS_NEW_FORMAT == "true" ]]; then
          
            IFS='-' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          
            if [ "$BRANCH_SOURCE" == "feature" ]; then
              IFS='.' read -ra VERSION_PARTS_SECOND <<< "${VERSION_PARTS[2]}"
              GET_BRANCH_NUMBER="${VERSION_PARTS[1]}-${VERSION_PARTS_SECOND[0]}"
            elif [ "$BRANCH_SOURCE" == "hotfix" ]; then
              IFS='.' read -ra VERSION_PARTS_SECOND <<< "${VERSION_PARTS[2]}"
              GET_BRANCH_NUMBER="${VERSION_PARTS[1]}-${VERSION_PARTS_SECOND[0]}"
            elif [ "$BRANCH_SOURCE" == "release" ]; then
              IFS='.' read -ra VERSION_PARTS_SECOND <<< "${VERSION_PARTS[1]}"
              GET_BRANCH_NUMBER="${VERSION_PARTS_SECOND[0]}"
            fi
          
            if [[ $GET_BRANCH_NUMBER == $BRANCH_NUMBER ]]; then
              CURRENT_NUMBER="${VERSION_PARTS_SECOND[1]}"
              NEW_NUMBER=$((CURRENT_NUMBER + 1))
              NEW_VERSION="${VERSION_PARTS[0]}-${BRANCH_NUMBER}.${NEW_NUMBER}"
            else
              IFS='.' read -ra VERSION_PARTS_FIRST <<< "${VERSION_PARTS[0]}"
              MAJOR_VERSION="${VERSION_PARTS_FIRST[0]}"
              MINOR_VERSION="${VERSION_PARTS_FIRST[1]}"
              NEW_VERSION_MINOR=$((MINOR_VERSION + 1))
              BRANCH_NUMBER=$BRANCH_NUMBER
              NEW_VERSION="${MAJOR_VERSION}.${NEW_VERSION_MINOR}.0-${BRANCH_NUMBER}.1"
              NEW_VERSION="${VERSION_PARTS[0]}-${BRANCH_NUMBER}.1"
            fi
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
            echo "handle=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          
          else
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR_VERSION="${VERSION_PARTS[0]}"
            MINOR_VERSION="${VERSION_PARTS[1]}"
            NEW_VERSION_MINOR=$((MINOR_VERSION + 1))
            BRANCH_NUMBER=$BRANCH_NUMBER
            NEW_VERSION="${MAJOR_VERSION}.${NEW_VERSION_MINOR}.0-${BRANCH_NUMBER}.1"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
            echo "handle=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          fi

      - name: Log GITHUB_ENV
        run: |
          echo "GET_VERSION is $GET_VERSION"          
          echo "BRANCH is $BRANCH"
          echo "BRANCH_SOURCE is $BRANCH_SOURCE"
          echo "BRANCH_NUMBER is $BRANCH_NUMBER"
          echo "NEW_VERSION is $NEW_VERSION"          
          echo "IS_NEW_FORMAT is $IS_NEW_FORMAT"
          echo "TYPE_FORMAT_VERSION is $TYPE_FORMAT_VERSION"

      - name: Config Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Set new version in package.json
        run: |
          echo "NEW_VERSION is $NEW_VERSION"
          npm version "$NEW_VERSION"

  invalidate-cache:
    needs: build-version
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Get current version
          run: |
            GET_VERSION=$(node -p -e "require('./package.json').version")
            echo "GET_VERSION is ${GET_VERSION}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::732306726995:role/GitHubActionsCloudFrontFull
          aws-region: us-east-1
          role-session-name: GitHub_to_AWS_via_FederatedOIDC

      - name: Invalidate CloudFront Cache
        run: aws cloudfront create-invalidation --distribution-id E3MTSN9SMDYQ23 --paths "/*"
      - name: Invalidate CloudFront Cache
        run: aws cloudfront create-invalidation --distribution-id E3MTSN9SMDYQ23 --paths "/*"
